train = sdfReagan[-i, ]
test = sdfReagan[i,]
nn = neuralnet(ppron ~ Days, data = train, hidden=c(2,2))
pr.nn <- compute(nn, df[i, ])
pr.nn_ <- pr.nn$net.result*(max(train$ppron)-min(train$ppron))+min(train$ppron)
test.r <- (test$ppron)*(max(test$ppron)-min(test$ppron))+min(test$ppron)
nnresults[i] = (test.r -pr.nn_)^2
}
for (i in 1:(nrow(sdfReagan))){
train = sdfReagan[-i, ]
test = sdfReagan[i,]
nn = neuralnet(ppron ~ Days, data = train, hidden=c(2,2))
pr.nn <- compute(nn, train[i, ])
pr.nn_ <- pr.nn$net.result*(max(train$ppron)-min(train$ppron))+min(train$ppron)
test.r <- (test$ppron)*(max(test$ppron)-min(test$ppron))+min(test$ppron)
nnresults[i] = (test.r -pr.nn_)^2
}
train = sdfReagan[-i, ]
test = sdfReagan[i,]
nn = neuralnet(ppron ~ Days, data = train, hidden=c(2,2))
pr.nn <- compute(nn, train[i, ])
i = 1
pr.nn <- compute(nn, train[i, ])
pr.nn <- compute(nn, test)
train = sdfReagan[-i, ]
test = sdfReagan[i,]
nn = neuralnet(ppron ~ Days, data = train, hidden=c(2,2))
pr.nn <- compute(nn, test)
pr.nn <- compute(nn, train)
pr.nn_ <- pr.nn$net.result*(max(train$ppron)-min(train$ppron))+min(train$ppron)
sdfReagan = as.data.frame(sdfReagan)
train = sdfReagan[-i, ]
test = sdfReagan[i,]
nn = neuralnet(ppron ~ Days, data = train, hidden=c(2,2))
pr.nn <- compute(nn, train)
pr.nn_ <- pr.nn$net.result*(max(train$ppron)-min(train$ppron))+min(train$ppron)
test.r <- (test$ppron)*(max(test$ppron)-min(test$ppron))+min(test$ppron)
nnresults[i] = (test.r -pr.nn_)^2
nnresults = numeric(nrow(dataReagan))
train = sdfReagan[-i, ]
test = sdfReagan[i,]
nn = neuralnet(ppron ~ Days, data = train, hidden=c(2,2))
pr.nn <- compute(nn, train)
pr.nn_ <- pr.nn$net.result*(max(train$ppron)-min(train$ppron))+min(train$ppron)
test.r <- (test$ppron)*(max(test$ppron)-min(test$ppron))+min(test$ppron)
nnresults[i] = (test.r -pr.nn_)^2
for (i in 1:(nrow(sdfReagan))){
train = sdfReagan[-i, ]
test = sdfReagan[i,]
nn = neuralnet(ppron ~ Days, data = train, hidden=c(2,2))
pr.nn <- compute(nn, train)
pr.nn_ <- pr.nn$net.result*(max(train$ppron)-min(train$ppron))+min(train$ppron)
test.r <- (test$ppron)*(max(test$ppron)-min(test$ppron))+min(test$ppron)
nnresults[i] = (test.r -pr.nn_)^2
}
nnPress = (sum(nnresults))
source('~/Documents/NLP/FullCodePresident.R')
View(totalResults)
source('~/Documents/NLP/FullCodePresident.R')
###--- SETUP ---###
# Clear Workspace
rm(list=ls())
# Source File
source("Functions.R")
# Options
options(scipen=999)
# Libraries
library(dplyr)
library(ggplot2)
library(mgcv)
library(stats)
library(neuralnet)
###--- IMPORT AND PREPROCESS DATA ---###
# Load Data
dataBush = read.csv("Bush.csv")
dataReagan = read.csv("Reagan.csv")
dataTrump = read.csv("Trump.csv")
# Clean Data
dataReagan = cleanData(dataReagan)
dataBush = cleanData(dataBush)
dataTrump = cleanData(dataTrump)
# Preprocess Data
dfReagan = preprocess(dataReagan)
dfBush = preprocess(dataBush)
dfTrump = preprocess(dataTrump)
# Scale the Data
sdfReagan = scale(dataReagan[,2:ncol(dataReagan)])
sdfReagan = cbind(dataReagan[, 1], sdfReagan)
colnames(sdfReagan)[colnames(sdfReagan) == ''] <- 'Days'
# Generate a list of features we are interested in
# First only look at the features which are significant
subsetReagan = filter(dfReagan, hommel<0.05, BY<0.05, feature!='Days')
subsetBush = filter(dfBush, hommel<0.05, BY<0.05, feature!='Days')
subsetReagan = rbind(subsetReagan, filter(dfReagan, BY<0.05, hommel>0.05, feature!='Days'))
subsetBush = rbind(subsetBush, filter(dfBush, BY<0.05, hommel>0.05,  feature!='Days'))
# Then generate a vector of features
bushFeatures = subsetBush$feature
reaganFeatures = subsetReagan$feature
###--- PLOTS ---###
# Reagan
XReagan = dfReagan$pvalue
YReagan = cbind(dfReagan$Bonferroni, dfReagan$BH, dfReagan$holm, dfReagan$hochberg,
dfReagan$hommel, dfReagan$BY)
matplot(XReagan, YReagan, xlab = "Reagan Raw p-value", ylab = "Adjusted p-value", type = 'l', asp = 1,
col = 1:6, lty = 1, lwd = 2)
legend('bottomright', legend = c('Bonferroni', 'BH', 'Holm', 'Hochberg', 'Hommel', 'BY'),
col = 1:6, cex = 1, pch = 16)
abline(0, 1, col = 1, lty = 2, lwd = 1)
# Bush
XBush = dfBush$pvalue
YBush = cbind(dfBush$Bonferroni, dfBush$BH, dfBush$holm, dfBush$hochberg,
dfBush$hommel, dfBush$BY)
matplot(XBush, YBush, xlab = "Bush Raw p-value", ylab = "Adjusted p-value", type = 'l', asp = 1,
col = 1:6, lty = 1, lwd = 2)
legend('bottomright', legend = c('Bonferroni', 'BH', 'Holm', 'Hochberg', 'Hommel', 'BY'),
col = 1:6, cex = 1, pch = 16)
abline(0, 1, col = 1, lty = 2, lwd = 1)
# Trump
XTrump = dfTrump$pvalue
YTrump = cbind(dfTrump$Bonferroni, dfTrump$BH, dfTrump$holm, dfTrump$hochberg,
dfTrump$hommel, dfTrump$BY)
matplot(XTrump, YTrump, xlab = "Trump Raw p-value", ylab = "Adjusted p-value",
type = 'l', asp = 1,
col = 1:6, lty = 1, lwd = 2)
legend('bottomright', legend = c('Bonferroni', 'BH', 'Holm', 'Hochberg', 'Hommel', 'BY'),
col = 1:6, cex = 1, pch = 16)
abline(0, 1, col = 1, lty = 2, lwd = 1)
# Load Data
results = numeric(length(dataReagan))
totalResults = data.frame(feature = character (),
gamPRESS = numeric(),
lmPRESS = numeric())
#                    family = Gamma(link = "log"),
#                    method = "REML")
#     pred = predict.gam(gamModel, df[i, ],
#                        type = "response")
#     results[i] = (as.numeric(pred) - tmp2) ^ 2
#     store = (as.numeric(pred) - tmp2) ^ 2
#   }
#   totalResults[i] = sum(store)
# }
# PPRON Feature
for (i in 1:(nrow(dataReagan))){
gamModel = gam(ppron ~ s(Days, bs = "gp"),
data = dataReagan[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, dataReagan[i, ],
type = "response")
results[i] = (as.numeric(pred) - dataReagan$ppron[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(dataReagan))
for (i in 1:(nrow(dataReagan))){
linearModel = lm(ppron ~ Days, data = dataReagan[-i, ])
pred = predict.lm(linearModel, dataReagan[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - dataReagan$ppron[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
sdfReagan = as.data.frame(sdfReagan)
vectortmp = data.frame("ppron",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
### Social Feature
for (i in 1:(nrow(df))){
gamModel = gam(social ~ s(Days, bs = "gp"),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$social[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(social ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$social[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("social",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# Nouns Normalised Feature
for (i in 1:(nrow(df))){
gamModel = gam(NounsNormalised ~ s(Days, bs = "gp"),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$NounsNormalised[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(NounsNormalised ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$NounsNormalised[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("NounsNormalised",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# function. Feature
for (i in 1:(nrow(df))){
gamModel = gam(function. ~ s(Days, bs = "gp"),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$function.[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(function. ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$function.[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("function.",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# conj Feature
for (i in 1:(nrow(df))){
gamModel = gam(conj ~ s(Days, bs = "gp"),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$conj[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(conj ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$conj[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("conj",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# PronounsNormalised Feature
for (i in 1:(nrow(df))){
gamModel = gam(PronounsNormalised ~ s(Days, bs = "gp"),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$PronounsNormalised[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(PronounsNormalised ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$PronounsNormalised[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("PronounsNormalised",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# Analytic Feature
for (i in 1:(nrow(df))){
gamModel = gam(Analytic ~ s(Days, bs = "gp"),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$Analytic[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(Analytic ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$Analytic[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("Analytic",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# pronoun Feature
for (i in 1:(nrow(df))){
gamModel = gam(pronoun ~ s(Days, bs = "gp"),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$pronoun[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(pronoun ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$pronoun[i]) ^ 2
}
source('~/Documents/NLP/FullCodePresident.R')
View(totalResults)
totalResults = scale(totalResults[2:3])
totalResults = totalResults[1], scale(totalResults[2:3])
totalResults = cbind(totalResults[1], scale(totalResults[2:3]))
totalResults = cbind(totalResults[1], scale(totalResults[2:3]))
totalResults = cbind(totalResults[:1], scale(totalResults[,2:3]))
totalResults = cbind(totalResults[,1], scale(totalResults[,2:3]))
totalResults = cbind(totalResults[,1], scale(totalResults[, 2]))
View(totalResults)
source('~/Documents/NLP/FullCodePresident.R')
totalResults = cbind(totalResults[,1], scale(totalResults[, 2]))
source('~/Documents/NLP/FullCodePresident.R')
test = totalResults
test %>%
mutate_at(c(2,3), funs(c(scale(.))))
View(test)
test = test %>%
mutate_at(c(2,3), funs(c(scale(.))))
View(test)
ttest = t.test(test[,2], test[,3])
View(ttest)
summary(ttest)
ttest
help(t.test)
ttest = t.test(test[,2], test[,3], alternative = "less", paired = TRUE)
ttst
ttest
ttest = t.test(test[,2], test[,3], alternative = "greater", paired = TRUE)
ttest
ttest = t.test(test[,2], test[,3])
ttest
test[,2]
View(test)
View(totalResults)
scatter_plot <- ggplot(dataBush, aes(Days, NN))
scatter_plot + geom_point() + labs(x = "Days", y = "NN") + geom_smooth(method="lm")
#jpeg("~/Documents/NLP/plots/GHWBUniqueWords.jpg", width = 350, height = 350)
scatter_plot <- ggplot(dataBush, aes(Days, NN))
scatter_plot + geom_point() + labs(x = "Days", y = "NN") + geom_smooth(method="loess")
cor.test(dataBush$Days, dataBush$NN, method = "pearson", conf.level = 0.95)
scatter_plot <- ggplot(dataReagan, aes(Days, NN))
scatter_plot + geom_point() + labs(x = "Days", y = "NN") + geom_smooth(method="lm")
#jpeg("~/Documents/NLP/plots/GHWBUniqueWords.jpg", width = 350, height = 350)
scatter_plot <- ggplot(dataReagan, aes(Days, NN))
scatter_plot + geom_point() + labs(x = "Days", y = "NN") + geom_smooth(method="loess")
cor.test(dataReagan$Days, dataReagan$NN, method = "pearson", conf.level = 0.95)
set.seed(500)
library(MASS)
data <- Boston
# Clear Workspace
rm(list=ls())
# Set Seed
set.seed(500)
# Load Libraries
library(MASS)
# Load Data
data <- Boston
apply(data,2,function(x) sum(is.na(x)))
index <- sample(1:nrow(data),round(0.75*nrow(data)))
train <- data[index,]
test <- data[-index,]
lm.fit <- glm(medv~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit,test)
MSE.lm <- sum((pr.lm - test$medv)^2)/nrow(test)
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
train_ <- scaled[index,]
test_ <- scaled[-index,]
library(neuralnet)
n <- names(train_)
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"], collapse = " + ")))
nn <- neuralnet(f,data=train_,hidden=c(5,3),linear.output=T)
plot(nn)
# Clear Workspace
rm(list=ls())
# Set Seed
set.seed(500)
# Load Libraries
library(MASS)
# Load Data
data <- Boston
# Check for NA's
apply(data,2,function(x) sum(is.na(x)))
index <- sample(1:nrow(data),round(0.75*nrow(data)))
train <- data[index,]
test <- data[-index,]
lm.fit <- glm(medv~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit,test)
MSE.lm <- sum((pr.lm - test$medv)^2)/nrow(test)
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
train_ <- scaled[index,]
test_ <- scaled[-index,]
library(neuralnet)
n <- names(train_)
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"], collapse = " + ")))
nn <- neuralnet(f,data=train_,hidden=c(5,3),linear.output=T)
plot(nn)
pr.nn <- compute(nn,test_[,1:13])
pr.nn_ <- pr.nn$net.result*(max(data$medv)-min(data$medv))+min(data$medv)
test.r <- (test_$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
print(paste(MSE.lm,MSE.nn))
par(mfrow=c(1,2))
plot(test$medv,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='NN',pch=18,col='red', bty='n')
plot(test$medv,pr.lm,col='blue',main='Real vs predicted lm',pch=18, cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='LM',pch=18,col='blue', bty='n', cex=.95)
plot(test$medv,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
points(test$medv,pr.lm,col='blue',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend=c('NN','LM'),pch=18,col=c('red','blue'))
library(boot)
set.seed(200)
lm.fit <- glm(medv~.,data=data)
cv.glm(data,lm.fit,K=10)$delta[1]
set.seed(450)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- scaled[index,]
test.cv <- scaled[-index,]
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:13])
pr.nn <- pr.nn$net.result*(max(data$medv)-min(data$medv))+min(data$medv)
test.cv.r <- (test.cv$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
pbar$step()
}
mean(cv.error)
cv.error
boxplot(cv.error,xlab='MSE CV',col='cyan',
border='blue',names='CV error (MSE)',
main='CV error (MSE) for NN',horizontal=TRUE)
source('~/Documents/NLP/FullCodePresident.R')
View(totalResults)
View(test)
ttest = t.test(test[,2], test[,3], paired = TRUE)
ttest
ttest = t.test(totalResults[,2], totalResults[,3], paired = TRUE)
ttest
indx <- totalResults[,2] < totalResults[,3]
binom.test(sum(indx), length(indx))
scatter_plot <- ggplot(dataReagan, aes(Days, NN))
scatter_plot + geom_point() + labs(x = "Days", y = "NN") + geom_smooth(method="lm")
#jpeg("~/Documents/NLP/plots/GHWBUniqueWords.jpg", width = 350, height = 350)
scatter_plot <- ggplot(dataReagan, aes(Days, NN))
scatter_plot + geom_point() + labs(x = "Days", y = "NN") + geom_smooth(method="loess")
scatter_plot <- ggplot(dataReagan, aes(Days, ppron))
scatter_plot + geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm")
#jpeg("~/Documents/NLP/plots/GHWBUniqueWords.jpg", width = 350, height = 350)
scatter_plot <- ggplot(dataReagan, aes(Days, ppron))
scatter_plot + geom_point() + labs(x = "Days", y = "NN") + geom_smooth(method="loess")
scatter_plot <- ggplot(dataReagan, aes(Days, ppron))
scatter_plot + geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm")
scatter_plot + geom_point() + labs(x = "Days", y = "NN") + geom_smooth(method="loess",
color = 'darkred')
scatter_plot <- ggplot(dataReagan, aes(Days, ppron))
scatter_plot + geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm")
+ geom_smooth(method="loess", color = 'darkred')
scatter_plot + geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess", color = 'darkred')
scatter_plot + geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess", color = 'green')
scatter_plot + geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess", color = 'darkgreen')
scatter_plot <- ggplot(dataReagan, aes(Days, ppron))
scatter_plot + geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess", color = 'darkgreen')
scatter_plot <- ggplot(dataReagan, aes(Days, ppron))
scatter_plot + geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess", color = 'darkgreen', fill = 'blue')
scatter_plot <- ggplot(dataReagan, aes(Days, ppron))
scatter_plot + theme_bw()+  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess", color = 'darkgreen', fill = 'blue')
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess", color = 'darkgreen', fill = 'blue') + theme_bw()
scatter_plot <- ggplot(dataReagan, aes(Days, ppron))
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess", color = 'darkgreen', fill = 'blue') + theme_bw()
scatter_plot <- ggplot(dataReagan, aes(Days, ppron))
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess") + theme_bw()
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess") + theme_minimal()
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess") + theme_gray()
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess", color = "black") + theme_gray()
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess", color = "black", line = "dashed") + theme_gray()
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm") + geom_smooth(method="loess", color = "black", lty = 2) + theme_gray()
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm", color = "black", lty = 1) + geom_smooth(method="loess", color = "black", lty = 2) + theme_gray()
