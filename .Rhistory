lmPress = sum(lmresults)
vectortmp = data.frame("pronoun",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# NN Feature
for (i in 1:(nrow(df))){
gamModel = gam(NN ~ s(Days, bs = "gp"),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$NN[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(NN ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$NN[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("NN",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# male Feature
for (i in 1:(nrow(df))){
gamModel = gam(male ~ s(Days, bs = "gp"),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$male[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(male ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$male[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("male",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# UniqueWords Feature
for (i in 1:(nrow(df))){
gamModel = gam(UniqueWords ~ s(Days, bs = "gp"),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$UniqueWords[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(UniqueWords ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$UniqueWords[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("UniqueWords",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# WDT Feature
for (i in 1:(nrow(df))){
gamModel = gam(WDT ~ s(Days, bs = "gp", k = 40),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$WDT[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(WDT ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$WDT[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("WDT",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# Nouns Feature
for (i in 1:(nrow(df))){
gamModel = gam(Nouns ~ s(Days, bs = "gp", k = 40),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$Nouns[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(Nouns ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$Nouns[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("Nouns",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# Nouns.100 Feature
for (i in 1:(nrow(df))){
gamModel = gam(Nouns.100 ~ s(Days, bs = "gp", k = 40),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$Nouns.100[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(Nouns.100 ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$Nouns.100[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("Nouns/100",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# UniqueStems Feature
for (i in 1:(nrow(df))){
gamModel = gam(UniqueStems ~ s(Days, bs = "gp", k = 40),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$UniqueStems[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(UniqueStems ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$UniqueStems[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("UniqueStems",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# shehe Feature
for (i in 1:(nrow(df))){
gamModel = gam(shehe ~ s(Days, bs = "gp", k = 40),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$shehe[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(shehe ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$shehe[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("shehe",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# VBZ Feature
for (i in 1:(nrow(df))){
gamModel = gam(VBZ ~ s(Days, bs = "gp", k = 40),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$VBZ[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(VBZ ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$VBZ[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("VBZ",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# JJ Feature
for (i in 1:(nrow(df))){
gamModel = gam(JJ ~ s(Days, bs = "gp", k = 40),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$JJ[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(JJ ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$JJ[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("JJ",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# article Feature
for (i in 1:(nrow(df))){
gamModel = gam(article ~ s(Days, bs = "gp", k = 40),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$article[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(article ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$article[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("article",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# Adjectives Feature
for (i in 1:(nrow(df))){
gamModel = gam(Adjectives ~ s(Days, bs = "gp", k = 40),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$Adjectives[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(Adjectives ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$Adjectives[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("Adjectives",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# Adjectives.100 Feature
for (i in 1:(nrow(df))){
gamModel = gam(Adjectives.100 ~ s(Days, bs = "gp", k = 40),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$Adjectives.100[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(Adjectives.100 ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$Adjectives.100[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("Adjectives.100",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
# Dic Feature
for (i in 1:(nrow(df))){
gamModel = gam(Dic ~ s(Days, bs = "gp", k = 40),
data = df[-i, ],
family = Gamma(link = "log"),
method = "REML")
pred = predict.gam(gamModel, df[i, ],
type = "response")
results[i] = (as.numeric(pred) - df$Dic[i]) ^ 2
}
# PRESS
gamPress = sum(results)
lmresults = numeric(nrow(df))
for (i in 1:(nrow(df))){
linearModel = lm(Dic ~ Days, data = df[-i, ])
pred = predict.lm(linearModel, df[i, ], type = "response")
lmresults[i] = (as.numeric(pred) - df$Dic[i]) ^ 2
}
# PRESS
lmPress = sum(lmresults)
vectortmp = data.frame("Dic",gamPress, lmPress)
names(vectortmp) = c('feature','gamPRESS', 'lmPRESS')
totalResults = rbind(totalResults, vectortmp)
test = totalResults
test = test %>%
mutate_at(c(2,3), funs(c(scale(.))))
ttest = t.test(totalResults[,2], totalResults[,3], paired = TRUE)
indx <- totalResults[,2] < totalResults[,3]
binom.test(sum(indx), length(indx))
ttest
scatter_plot <- ggplot(dataReagan, aes(Days, ppron))
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm", color = "#CC0033", fill = '#CC0033', lty = 1) + geom_smooth(method="loess", color = "#3399FF", fill = '#3399FF' ,lty = 2) + theme_minimal() +
ggtitle('Reagan - Use of personal Pronouns over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comparison1Reagan.png')
scatter_plot <- ggplot(dataReagan, aes(Days, NounsNormalised))
scatter_plot +  geom_point() + labs(x = "Days", y = "NounsNormalised") + geom_smooth(method="lm", color = "#CC0033", fill = '#CC0033', lty = 1) + geom_smooth(method="loess", color = "#3399FF", fill = '#3399FF', lty = 2) + theme_minimal() +
ggtitle('Reagan - Use of Nouns (Normalised) over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comparison2Reagan.png')
scatter_plot <- ggplot(dataBush, aes(Days, ppron))
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm", color = "#CC0033", fill = '#CC0033', lty = 1) + geom_smooth(method="loess", color = "#3399FF", fill = '#3399FF', lty = 2) + theme_minimal() +
ggtitle('Bush - Use of personal Pronouns over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comparison1Bush.png')
scatter_plot <- ggplot(dataBush, aes(Days, NounsNormalised))
scatter_plot +  geom_point() + labs(x = "Days", y = "NounsNormalised") + geom_smooth(method="lm", color = "#CC0033", fill = '#CC0033', lty = 1) + geom_smooth(method="loess", color = "#3399FF", fill = '#3399FF', lty = 2) + theme_minimal() +
ggtitle('Bush - Use of Nouns (Normalised) over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comparison2Bush.png')
# Linear models, comparison from first point to all points after 700 days
df = dataReagan
df2 = df
df = filter(dataReagan, Days > 700 | Days < 1)
df2 = filter(dataReagan, Days > 700 | Days < 37 & Days > 2)
df = df %>% select(Days, ppron)
df2 = df2 %>% select(Days, ppron)
df$diff = df$ppron - 8.86
df2$diff = df2$ppron - 9.44
df$status = 'stable'
df$status[df$diff > 0.10] = 'declining'
df$status[df$diff < -0.10] = 'improving'
df2$status = 'stable'
df2$status[df2$diff > 0.10] = 'declining'
df2$status[df2$diff < -0.10] = 'improving'
cmp1 = ggplot(df, aes(x=Days, y=ppron)) +
geom_point() +
geom_segment(aes(x = 0, y = 8.83, xend = df$Days, yend = df$ppron, color = status), data = df)
cmp1 + scale_color_brewer(palette = "Set1")
cmp1 + scale_y_reverse()
cmp1 + ggtitle('Reagan - Personal Pronouns over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comp1.png')
cmp2 = ggplot(df2, aes(x=Days, y=ppron)) +
geom_point() +
geom_segment(aes(x = 36, y = 9.44, xend = df2$Days, yend = df2$ppron, color = status), data = df2)
cmp2 + scale_color_brewer(palette = "Set1")
cmp2 + scale_y_reverse()
cmp2 +
ggtitle('Reagan - Personal Pronouns over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comp2.png')
# T-tests (Reagan v Bush)
x = dataReagan$WordCount
y = dataBush$WordCount
t.test(x, y)
x = dataReagan$UniqueStems
y = dataBush$UniqueStems
t.test(x, y)
x = dataReagan$MLU
y = dataBush$MLU
t.test(x, y)
x = dataReagan$NSNouns
y = dataBush$NSNouns
t.test(x, y)
x = dataReagan$LIVerbs
y = dataBush$LIVerbs
t.test(x, y)
# T-tests (Reagan v Trump)
x = dataReagan$WordCount
y = dataTrump$WordCount
t.test(x, y)
x = dataReagan$UniqueStems
y = dataTrump$UniqueStems
t.test(x, y)
x = dataReagan$MLU
y = dataTrump$MLU
t.test(x, y)
x = dataReagan$NSNouns
y = dataTrump$NSNouns
t.test(x, y)
x = dataReagan$LIVerbs
y = dataTrump$LIVerbs
t.test(x, y)
# T-tests (Bush v Trump)
x = dataBush$WordCount
y = dataTrump$WordCount
t.test(x, y)
x = dataBush$UniqueStems
y = dataTrump$UniqueStems
t.test(x, y)
x = dataBush$MLU
y = dataTrump$MLU
t.test(x, y)
x = dataBush$NSNouns
y = dataTrump$NSNouns
t.test(x, y)
x = dataBush$LIVerbs
y = dataTrump$LIVerbs
t.test(x, y)
# Fisher's R to Z transformation
library(psych)
dfReagan$r2z = fisherz(dfReagan$r2)
dfBush$r2z = fisherz(dfBush$r2)
dfTrump$r2z = fisherz(dfTrump$r2)
nBush = 132
nReagan = 45
nTrump = 29
x = 1/(nReagan-3)
y = 1/(nBush-3)
dfBush = arrange(dfBush, feature)
dfReagan = arrange(dfReagan, feature)
dfTrump = arrange(dfTrump, feature)
compareRRtoGHWB = sqrt(x + y)
a = data.frame(dfReagan$r2)
a[,2] = data.frame(dfBush$r2)
a[,3] = data.frame(dfBush$feature)
comp = data.frame(result=numeric())[1:200, ]
i = NULL
i = 2
days = dataReagan$Days
total = 0
for (i in 1:length(days)-1) {
diff = days[i+1] - days[i]
total = total + diff
meandiff = total / length(days)
}
scatter_plot <- ggplot(dataReagan, aes(Days, ppron))
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm", color = "#CC0033", fill = '#CC0033', lty = 1) + geom_smooth(method="loess", color = "#3399FF", fill = '#3399FF' ,lty = 2) + theme_minimal() +
ggtitle('Reagan - Use of personal Pronouns over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comparison1Reagan.png')
scatter_plot <- ggplot(dataReagan, aes(Days, NounsNormalised))
scatter_plot +  geom_point() + labs(x = "Days", y = "NounsNormalised") + geom_smooth(method="lm", color = "#CC0033", fill = '#CC0033', lty = 1) + geom_smooth(method="loess", color = "#3399FF", fill = '#3399FF', lty = 2) + theme_minimal() +
ggtitle('Reagan - Use of Nouns (Normalised) over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comparison2Reagan.png')
scatter_plot <- ggplot(dataBush, aes(Days, ppron))
scatter_plot +  geom_point() + labs(x = "Days", y = "ppron") + geom_smooth(method="lm", color = "#CC0033", fill = '#CC0033', lty = 1) + geom_smooth(method="loess", color = "#3399FF", fill = '#3399FF', lty = 2) + theme_minimal() +
ggtitle('Bush - Use of personal Pronouns over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comparison1Bush.png')
scatter_plot <- ggplot(dataBush, aes(Days, NounsNormalised))
scatter_plot +  geom_point() + labs(x = "Days", y = "NounsNormalised") + geom_smooth(method="lm", color = "#CC0033", fill = '#CC0033', lty = 1) + geom_smooth(method="loess", color = "#3399FF", fill = '#3399FF', lty = 2) + theme_minimal() +
ggtitle('Bush - Use of Nouns (Normalised) over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comparison2Bush.png')
cmp1 = ggplot(df, aes(x=Days, y=ppron)) +
geom_point() +
geom_segment(aes(x = 0, y = 8.83, xend = df$Days, yend = df$ppron, color = status), data = df)
cmp1 + scale_color_brewer(palette = "Set1")
cmp1 + scale_y_reverse()
cmp1 + ggtitle('Reagan - Personal Pronouns over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comp1.png')
cmp2 = ggplot(df2, aes(x=Days, y=ppron)) +
geom_point() +
geom_segment(aes(x = 36, y = 9.44, xend = df2$Days, yend = df2$ppron, color = status), data = df2)
cmp2 + scale_color_brewer(palette = "Set1")
cmp2 + scale_y_reverse()
cmp2 +
ggtitle('Reagan - Personal Pronouns over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comp2.png')
cmp1
cmp2
cmp2 = cmp2 + scale_color_brewer(palette = "Set1")
cmp2 = cmp2 + scale_y_reverse()
cmp2 = cmp2 +
ggtitle('Reagan - Personal Pronouns over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comp2.png')
cmp1
cmp2
cmp1 = ggplot(df, aes(x=Days, y=ppron)) +
geom_point() +
geom_segment(aes(x = 0, y = 8.83, xend = df$Days, yend = df$ppron, color = status), data = df)
cmp1 = cmp1 + scale_color_brewer(palette = "Set1")
cmp1 = cmp1 + scale_y_reverse()
cmp1 = cmp1+ ggtitle('Reagan - Personal Pronouns over time') + theme(plot.title = element_text(lineheight=.8, face="bold", family="URWGothic"))
ggsave('comp1.png')
# T-tests (Reagan v Bush)
x = dataReagan$WordCount
y = dataBush$WordCount
t.test(x, y)
install.packages("reticulate")
library(reticulate)
install.packages("NLP")
install.packages("tm")
install.packages("openNLP")
install.packages("openNLPmodels.en")
library(openNLPmodels.en)
